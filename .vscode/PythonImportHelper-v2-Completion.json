[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "django.contrib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib",
        "description": "django.contrib",
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "connections",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "authentication",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "authentication",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "IngredientSerializer",
        "importPath": "recipe.serializers",
        "description": "recipe.serializers",
        "isExtraImport": true,
        "detail": "recipe.serializers",
        "documentation": {}
    },
    {
        "label": "TagSerializer",
        "importPath": "recipe.serializers",
        "description": "recipe.serializers",
        "isExtraImport": true,
        "detail": "recipe.serializers",
        "documentation": {}
    },
    {
        "label": "TagSerializer",
        "importPath": "recipe.serializers",
        "description": "recipe.serializers",
        "isExtraImport": true,
        "detail": "recipe.serializers",
        "documentation": {}
    },
    {
        "label": "IngredientSerializer",
        "importPath": "recipe.serializers",
        "description": "recipe.serializers",
        "isExtraImport": true,
        "detail": "recipe.serializers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "recipe",
        "description": "recipe",
        "isExtraImport": true,
        "detail": "recipe",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "user",
        "description": "user",
        "isExtraImport": true,
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "user.serializers",
        "description": "user.serializers",
        "isExtraImport": true,
        "detail": "user.serializers",
        "documentation": {}
    },
    {
        "label": "AuthTokenSerializer",
        "importPath": "user.serializers",
        "description": "user.serializers",
        "isExtraImport": true,
        "detail": "user.serializers",
        "documentation": {}
    },
    {
        "label": "ObtainAuthToken",
        "importPath": "rest_framework.authtoken.views",
        "description": "rest_framework.authtoken.views",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.views",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'a2(snt0($2&1eoo&unk($33t=(3e1(^60_h4v6)#ki0p+w5n^w'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "SECRET_KEY = 'a2(snt0($2&1eoo&unk($33t=(3e1(^60_h4v6)#ki0p+w5n^w'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework.authtoken',\n    'core',",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'app.urls'",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "ROOT_URLCONF = 'app.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "WSGI_APPLICATION = 'app.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/2.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'HOST': os.environ.get('DB_HOST'),\n        'NAME': os.environ.get('DB_NAME'),\n        'USER': os.environ.get('DB_USER'),\n        'PASSWORD': os.environ.get('DB_PASS'),",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'HOST': os.environ.get('DB_HOST'),\n        'NAME': os.environ.get('DB_NAME'),\n        'USER': os.environ.get('DB_USER'),\n        'PASSWORD': os.environ.get('DB_PASS'),\n    }\n}\n# Password validation",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nSTATIC_URL = '/static/'\nAUTH_USER_MODEL = 'core.User'",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nSTATIC_URL = '/static/'\nAUTH_USER_MODEL = 'core.User'",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nSTATIC_URL = '/static/'\nAUTH_USER_MODEL = 'core.User'",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nSTATIC_URL = '/static/'\nAUTH_USER_MODEL = 'core.User'",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.1/howto/static-files/\nSTATIC_URL = '/static/'\nAUTH_USER_MODEL = 'core.User'",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nAUTH_USER_MODEL = 'core.User'",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'core.User'",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.app.urls",
        "description": "app.app.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/user/', include('user.urls')),\n    path('api/recipe/', include('recipe.urls'))\n]",
        "detail": "app.app.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "app.app.wsgi",
        "description": "app.app.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "app.app.wsgi",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.core.management.commands.wait_for_db",
        "description": "app.core.management.commands.wait_for_db",
        "peekOfCode": "class Command(BaseCommand):\n    \"\"\"Django command to pause execution until database is available\"\"\"\n    def handle(self, *args, **options):\n        self.stdout.write('Waiting for database...')\n        db_connection = False\n        while not db_connection:\n            try:\n                db_connection = connections['default']\n            except OperationalError:\n                self.stdout.write('Database unavailable, waiting 1 second...')",
        "detail": "app.core.management.commands.wait_for_db",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0001_initial",
        "description": "app.core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),",
        "detail": "app.core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0002_auto_20230913_1711",
        "description": "app.core.migrations.0002_auto_20230913_1711",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='name',\n            field=models.CharField(max_length=255, null=True),\n        ),",
        "detail": "app.core.migrations.0002_auto_20230913_1711",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0003_auto_20230913_2011",
        "description": "app.core.migrations.0003_auto_20230913_2011",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0002_auto_20230913_1711'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='name',\n            field=models.CharField(max_length=255),\n        ),",
        "detail": "app.core.migrations.0003_auto_20230913_2011",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0004_user_test",
        "description": "app.core.migrations.0004_user_test",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0003_auto_20230913_2011'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='test',\n            field=models.CharField(default='', max_length=255),\n            preserve_default=False,",
        "detail": "app.core.migrations.0004_user_test",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0005_auto_20230913_2022",
        "description": "app.core.migrations.0005_auto_20230913_2022",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0004_user_test'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='user',\n            name='name',\n        ),\n        migrations.RemoveField(",
        "detail": "app.core.migrations.0005_auto_20230913_2022",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0006_user_name",
        "description": "app.core.migrations.0006_user_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0005_auto_20230913_2022'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='name',\n            field=models.CharField(default='name', max_length=255),\n            preserve_default=False,",
        "detail": "app.core.migrations.0006_user_name",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0007_auto_20230913_2032",
        "description": "app.core.migrations.0007_auto_20230913_2032",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0006_user_name'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='user',\n            old_name='name',\n            new_name='username',\n        ),",
        "detail": "app.core.migrations.0007_auto_20230913_2032",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0008_user_is_superuser",
        "description": "app.core.migrations.0008_user_is_superuser",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0007_auto_20230913_2032'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='is_superuser',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "app.core.migrations.0008_user_is_superuser",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0009_tag",
        "description": "app.core.migrations.0009_tag",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0008_user_is_superuser'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Tag',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),",
        "detail": "app.core.migrations.0009_tag",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0010_ingredient",
        "description": "app.core.migrations.0010_ingredient",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0009_tag'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Ingredient',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),",
        "detail": "app.core.migrations.0010_ingredient",
        "documentation": {}
    },
    {
        "label": "AdminSiteTests",
        "kind": 6,
        "importPath": "app.core.tests.test_admin",
        "description": "app.core.tests.test_admin",
        "peekOfCode": "class AdminSiteTests(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.admin_user = get_user_model().objects.create_superuser(\n            email=\"admin@gmail.com\",\n            password=\"qwe123\",\n        )\n        self.client.force_login(self.admin_user)\n        self.user = get_user_model().objects.create_user(\n            email=\"user@gmail.com\",",
        "detail": "app.core.tests.test_admin",
        "documentation": {}
    },
    {
        "label": "CommandTest",
        "kind": 6,
        "importPath": "app.core.tests.test_commands",
        "description": "app.core.tests.test_commands",
        "peekOfCode": "class CommandTest(TestCase):\n    def test_wait_for_db_ready(self):\n        \"\"\"Test waiting for db when db is available\"\"\"\n        with patch('django.db.utils.ConnectionHandler.__getitem__') as gi:\n            gi.return_value = True\n            call_command('wait_for_db')\n            self.assertEqual(gi.call_count, 1)\n    @patch('time.sleep', return_value=True)\n    def test_wait_for_db(self, ts):\n        \"\"\"Test waiting for db\"\"\"",
        "detail": "app.core.tests.test_commands",
        "documentation": {}
    },
    {
        "label": "ModelTests",
        "kind": 6,
        "importPath": "app.core.tests.test_models",
        "description": "app.core.tests.test_models",
        "peekOfCode": "class ModelTests(TestCase):\n    def test_create_user_with_email_successful(self):\n        \"\"\"Test creating a new user with an email is successful\"\"\"\n        email = 'example.email@example.comm'\n        password = 'testPass123'\n        user = get_user_model().objects.create_user(\n            email=email,\n            password=password,\n            username=\"test\",\n        )",
        "detail": "app.core.tests.test_models",
        "documentation": {}
    },
    {
        "label": "sample_user",
        "kind": 2,
        "importPath": "app.core.tests.test_models",
        "description": "app.core.tests.test_models",
        "peekOfCode": "def sample_user(email=\"test@gmail.com\", password=\"testpass\"):\n    \"\"\"Create a sample user\"\"\"\n    return get_user_model().objects.create_user(email, password)\nclass ModelTests(TestCase):\n    def test_create_user_with_email_successful(self):\n        \"\"\"Test creating a new user with an email is successful\"\"\"\n        email = 'example.email@example.comm'\n        password = 'testPass123'\n        user = get_user_model().objects.create_user(\n            email=email,",
        "detail": "app.core.tests.test_models",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "app.core.admin",
        "description": "app.core.admin",
        "peekOfCode": "class UserAdmin(BaseUserAdmin):\n    ordering = ['id']\n    list_display = ['email', 'username']\n    list_filter = ('is_active', 'is_staff')\n    filter_horizontal = ()\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        (_('Personal info'), {'fields': ('username',)}),\n        (_('Permissions'), {\n         'fields': ('is_active', 'is_staff', 'is_superuser',)",
        "detail": "app.core.admin",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "app.core.apps",
        "description": "app.core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    name = 'core'",
        "detail": "app.core.apps",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "app.core.models",
        "description": "app.core.models",
        "peekOfCode": "class UserManager(BaseUserManager):\n    \"\"\"Custom user manager class\"\"\"\n    def create_user(self, email, password=None, **extra_fields):\n        \"\"\"Creates and saves a new user\"\"\"\n        if not email:\n            raise ValueError('User must has email address')\n        username = ''\n        if extra_fields.get('username'):\n            username = extra_fields.get('username')\n            extra_fields.pop('username')",
        "detail": "app.core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.core.models",
        "description": "app.core.models",
        "peekOfCode": "class User(AbstractBaseUser, PermissionManager):\n    \"\"\"Custom user model that supports using email instead of username\"\"\"\n    def has_perm(self, perm, obj=None):\n        \"\"\"Does the user have a specific permission\"\"\"\n        return self.is_superuser\n    def has_module_perms(self, app_label):\n        \"\"\"Does the user have a specific permission\"\"\"\n        return self.is_superuser\n    username = models.CharField(max_length=255)\n    email = models.EmailField(max_length=255, unique=True)",
        "detail": "app.core.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "app.core.models",
        "description": "app.core.models",
        "peekOfCode": "class Tag(models.Model):\n    \"\"\"Tag to be used in the recipe\"\"\"\n    name = models.CharField(max_length=255)\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE\n    )\n    def __str__(self):\n        return self.name\nclass Ingredient(models.Model):",
        "detail": "app.core.models",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "kind": 6,
        "importPath": "app.core.models",
        "description": "app.core.models",
        "peekOfCode": "class Ingredient(models.Model):\n    \"\"\"Ingredient to be used in the recipe\"\"\"\n    name = models.CharField(max_length=255)\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE\n    )\n    def __str__(self):\n        return self.name",
        "detail": "app.core.models",
        "documentation": {}
    },
    {
        "label": "PublicIngredientsApiTests",
        "kind": 6,
        "importPath": "app.recipe.tests.test_ingredients_api",
        "description": "app.recipe.tests.test_ingredients_api",
        "peekOfCode": "class PublicIngredientsApiTests(TestCase):\n    \"\"\"Test the publicly available ingredients API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_login_required(self):\n        \"\"\"Test that login is required for tags\"\"\"\n        res = self.client.get(INGREDIENTS_URL)\n        self.assertEqual(res.status_code, status.HTTP_401_UNAUTHORIZED)\nclass PrivateIngredientsApiTests(TestCase):\n    \"\"\"Test the authorized user ingredients API\"\"\"",
        "detail": "app.recipe.tests.test_ingredients_api",
        "documentation": {}
    },
    {
        "label": "PrivateIngredientsApiTests",
        "kind": 6,
        "importPath": "app.recipe.tests.test_ingredients_api",
        "description": "app.recipe.tests.test_ingredients_api",
        "peekOfCode": "class PrivateIngredientsApiTests(TestCase):\n    \"\"\"Test the authorized user ingredients API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n        self.user = get_user_model().objects.create_user(\n            \"test@gmail.com\",\n            \"testtest\"\n        )\n        self.client.force_authenticate(self.user)\n    def test_retrieve_ingredients(self):",
        "detail": "app.recipe.tests.test_ingredients_api",
        "documentation": {}
    },
    {
        "label": "INGREDIENTS_URL",
        "kind": 5,
        "importPath": "app.recipe.tests.test_ingredients_api",
        "description": "app.recipe.tests.test_ingredients_api",
        "peekOfCode": "INGREDIENTS_URL = reverse('recipe:ingredient-list')\nclass PublicIngredientsApiTests(TestCase):\n    \"\"\"Test the publicly available ingredients API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_login_required(self):\n        \"\"\"Test that login is required for tags\"\"\"\n        res = self.client.get(INGREDIENTS_URL)\n        self.assertEqual(res.status_code, status.HTTP_401_UNAUTHORIZED)\nclass PrivateIngredientsApiTests(TestCase):",
        "detail": "app.recipe.tests.test_ingredients_api",
        "documentation": {}
    },
    {
        "label": "PublicTagsApiTests",
        "kind": 6,
        "importPath": "app.recipe.tests.test_tags_api",
        "description": "app.recipe.tests.test_tags_api",
        "peekOfCode": "class PublicTagsApiTests(TestCase):\n    \"\"\"Test the publicly available tags API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_login_required(self):\n        \"\"\"Test that login is required for tags\"\"\"\n        res = self.client.get(TAGS_URL)\n        self.assertEqual(res.status_code, status.HTTP_401_UNAUTHORIZED)\nclass PrivateTagsApiTests(TestCase):\n    \"\"\"Test the authorized user tags API\"\"\"",
        "detail": "app.recipe.tests.test_tags_api",
        "documentation": {}
    },
    {
        "label": "PrivateTagsApiTests",
        "kind": 6,
        "importPath": "app.recipe.tests.test_tags_api",
        "description": "app.recipe.tests.test_tags_api",
        "peekOfCode": "class PrivateTagsApiTests(TestCase):\n    \"\"\"Test the authorized user tags API\"\"\"\n    def setUp(self):\n        self.user = get_user_model().objects.create_user(\n            \"test@gmail.com\",\n            \"testtest\"\n        )\n        self.client = APIClient()\n        self.client.force_authenticate(self.user)\n    def test_retrieve_tags(self):",
        "detail": "app.recipe.tests.test_tags_api",
        "documentation": {}
    },
    {
        "label": "TAGS_URL",
        "kind": 5,
        "importPath": "app.recipe.tests.test_tags_api",
        "description": "app.recipe.tests.test_tags_api",
        "peekOfCode": "TAGS_URL = reverse('recipe:tag-list')\nclass PublicTagsApiTests(TestCase):\n    \"\"\"Test the publicly available tags API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_login_required(self):\n        \"\"\"Test that login is required for tags\"\"\"\n        res = self.client.get(TAGS_URL)\n        self.assertEqual(res.status_code, status.HTTP_401_UNAUTHORIZED)\nclass PrivateTagsApiTests(TestCase):",
        "detail": "app.recipe.tests.test_tags_api",
        "documentation": {}
    },
    {
        "label": "RecipeConfig",
        "kind": 6,
        "importPath": "app.recipe.apps",
        "description": "app.recipe.apps",
        "peekOfCode": "class RecipeConfig(AppConfig):\n    name = 'recipe'",
        "detail": "app.recipe.apps",
        "documentation": {}
    },
    {
        "label": "TagSerializer",
        "kind": 6,
        "importPath": "app.recipe.serializers",
        "description": "app.recipe.serializers",
        "peekOfCode": "class TagSerializer(serializers.ModelSerializer):\n    \"\"\"Model definition for TagSerializer.\"\"\"\n    class Meta:\n        \"\"\"Meta definition for TagSerializer.\"\"\"\n        model = Tag\n        fields = ('id', 'name')\n        read_only_fields = ('id',)\nclass IngredientSerializer(serializers.ModelSerializer):\n    \"\"\"Model definition for IngredientSerializer.\"\"\"\n    class Meta:",
        "detail": "app.recipe.serializers",
        "documentation": {}
    },
    {
        "label": "IngredientSerializer",
        "kind": 6,
        "importPath": "app.recipe.serializers",
        "description": "app.recipe.serializers",
        "peekOfCode": "class IngredientSerializer(serializers.ModelSerializer):\n    \"\"\"Model definition for IngredientSerializer.\"\"\"\n    class Meta:\n        \"\"\"Meta definition for IngredientSerializer.\"\"\"\n        model = Ingredient\n        fields = ('id', 'name')\n        read_only_fields = ('id',)",
        "detail": "app.recipe.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.recipe.urls",
        "description": "app.recipe.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register('tags', views.TagViewSet)\nrouter.register('ingredients', views.IngredientViewSet)\napp_name = 'recipe'\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "app.recipe.urls",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "app.recipe.urls",
        "description": "app.recipe.urls",
        "peekOfCode": "app_name = 'recipe'\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "app.recipe.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.recipe.urls",
        "description": "app.recipe.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "app.recipe.urls",
        "documentation": {}
    },
    {
        "label": "TagViewSet",
        "kind": 6,
        "importPath": "app.recipe.views",
        "description": "app.recipe.views",
        "peekOfCode": "class TagViewSet(viewsets.GenericViewSet, mixins.ListModelMixin, mixins.CreateModelMixin):\n    \"\"\"Manage tags in the database\"\"\"\n    authentication_classes = (authentication.TokenAuthentication,)\n    permission_classes = (permissions.IsAuthenticated,)\n    queryset = Tag.objects.all()\n    serializer_class = TagSerializer\n    def get_queryset(self):\n        \"\"\"Return objects for the current authenticated user only\"\"\"\n        user = self.request.user\n        return self.queryset.filter(user=user).order_by('-name')",
        "detail": "app.recipe.views",
        "documentation": {}
    },
    {
        "label": "IngredientViewSet",
        "kind": 6,
        "importPath": "app.recipe.views",
        "description": "app.recipe.views",
        "peekOfCode": "class IngredientViewSet(viewsets.GenericViewSet, mixins.ListModelMixin, mixins.CreateModelMixin):\n    \"\"\"Manage ingredients in the database\"\"\"\n    authentication_classes = (authentication.TokenAuthentication,)\n    permission_classes = (permissions.IsAuthenticated,)\n    queryset = Ingredient.objects.all()\n    serializer_class = IngredientSerializer\n    def get_queryset(self):\n        \"\"\"Return objects for the current authenticated user only\"\"\"\n        user = self.request.user\n        return self.queryset.filter(user=user).order_by('-name')",
        "detail": "app.recipe.views",
        "documentation": {}
    },
    {
        "label": "PublicUserApiTests",
        "kind": 6,
        "importPath": "app.user.tests.test_user_api",
        "description": "app.user.tests.test_user_api",
        "peekOfCode": "class PublicUserApiTests(TestCase):\n    \"\"\"Test the users API (public)\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_create_valid_user_success(self):\n        \"\"\"Test creating user with valid payload is successful\"\"\"\n        res = self.client.post(CREATE_USER_URL, user_payload)\n        self.assertEqual(res.status_code, status.HTTP_201_CREATED)\n        user = get_user_model().objects.get(**res.data)\n        self.assertTrue(user.check_password(user_payload['password']))",
        "detail": "app.user.tests.test_user_api",
        "documentation": {}
    },
    {
        "label": "PrivateUserApiTest",
        "kind": 6,
        "importPath": "app.user.tests.test_user_api",
        "description": "app.user.tests.test_user_api",
        "peekOfCode": "class PrivateUserApiTest(TestCase):\n    \"\"\"Test API requests that require authentication\"\"\"\n    def setUp(self):\n        self.user = create_user(**user_payload)\n        self.client = APIClient()\n        self.client.force_authenticate(user=self.user)\n    def test_retrieve_profile_success(self):\n        \"\"\"Test that the user can retrieve profile successfully\"\"\"\n        res = self.client.get(ME_URL)\n        self.assertEqual(res.status_code, status.HTTP_200_OK)",
        "detail": "app.user.tests.test_user_api",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.user.tests.test_user_api",
        "description": "app.user.tests.test_user_api",
        "peekOfCode": "def create_user(**params):\n    \"\"\"Helper function to create new user\"\"\"\n    return get_user_model().objects.create_user(**params)\nclass PublicUserApiTests(TestCase):\n    \"\"\"Test the users API (public)\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_create_valid_user_success(self):\n        \"\"\"Test creating user with valid payload is successful\"\"\"\n        res = self.client.post(CREATE_USER_URL, user_payload)",
        "detail": "app.user.tests.test_user_api",
        "documentation": {}
    },
    {
        "label": "CREATE_USER_URL",
        "kind": 5,
        "importPath": "app.user.tests.test_user_api",
        "description": "app.user.tests.test_user_api",
        "peekOfCode": "CREATE_USER_URL = reverse('user:create')\nTOKEN_URL = reverse('user:token')\nME_URL = reverse('user:me')\nuser_payload = {\n    'email': 'test@gmail.com',\n    'password': '12346',\n    'username': 'test'\n}\ndef create_user(**params):\n    \"\"\"Helper function to create new user\"\"\"",
        "detail": "app.user.tests.test_user_api",
        "documentation": {}
    },
    {
        "label": "TOKEN_URL",
        "kind": 5,
        "importPath": "app.user.tests.test_user_api",
        "description": "app.user.tests.test_user_api",
        "peekOfCode": "TOKEN_URL = reverse('user:token')\nME_URL = reverse('user:me')\nuser_payload = {\n    'email': 'test@gmail.com',\n    'password': '12346',\n    'username': 'test'\n}\ndef create_user(**params):\n    \"\"\"Helper function to create new user\"\"\"\n    return get_user_model().objects.create_user(**params)",
        "detail": "app.user.tests.test_user_api",
        "documentation": {}
    },
    {
        "label": "ME_URL",
        "kind": 5,
        "importPath": "app.user.tests.test_user_api",
        "description": "app.user.tests.test_user_api",
        "peekOfCode": "ME_URL = reverse('user:me')\nuser_payload = {\n    'email': 'test@gmail.com',\n    'password': '12346',\n    'username': 'test'\n}\ndef create_user(**params):\n    \"\"\"Helper function to create new user\"\"\"\n    return get_user_model().objects.create_user(**params)\nclass PublicUserApiTests(TestCase):",
        "detail": "app.user.tests.test_user_api",
        "documentation": {}
    },
    {
        "label": "user_payload",
        "kind": 5,
        "importPath": "app.user.tests.test_user_api",
        "description": "app.user.tests.test_user_api",
        "peekOfCode": "user_payload = {\n    'email': 'test@gmail.com',\n    'password': '12346',\n    'username': 'test'\n}\ndef create_user(**params):\n    \"\"\"Helper function to create new user\"\"\"\n    return get_user_model().objects.create_user(**params)\nclass PublicUserApiTests(TestCase):\n    \"\"\"Test the users API (public)\"\"\"",
        "detail": "app.user.tests.test_user_api",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "app.user.apps",
        "description": "app.user.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    name = 'user'",
        "detail": "app.user.apps",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "app.user.serializers",
        "description": "app.user.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the users object\"\"\"\n    class Meta:\n        \"\"\"Meta class\"\"\"\n        model = get_user_model()\n        fields = ('email', 'password', 'username')\n        extra_kwargs = {'password': {'write_only': True, 'min_length': 5}}\n    def create(self, validated_data):\n        \"\"\"Create a new with encrypted password\"\"\"\n        return get_user_model().objects.create_user(**validated_data)",
        "detail": "app.user.serializers",
        "documentation": {}
    },
    {
        "label": "AuthTokenSerializer",
        "kind": 6,
        "importPath": "app.user.serializers",
        "description": "app.user.serializers",
        "peekOfCode": "class AuthTokenSerializer(serializers.Serializer):\n    \"\"\"Serializer for the user authentication object\"\"\"\n    email = serializers.CharField()\n    password = serializers.CharField(\n        style={'input_type': 'password', },\n        trim_whitespace=False\n    )\n    def validate(self, attrs):\n        \"\"\"Validate and auth the user\"\"\"\n        email = attrs.get('email')",
        "detail": "app.user.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "app.user.urls",
        "description": "app.user.urls",
        "peekOfCode": "app_name = 'user'\nurlpatterns = [\n    path('create/', views.CreateUserView.as_view(), name='create'),\n    path('token/', views.CreateTokenView.as_view(), name='token'),\n    path('me/', views.ManageUserView.as_view(), name='me'),\n]",
        "detail": "app.user.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.user.urls",
        "description": "app.user.urls",
        "peekOfCode": "urlpatterns = [\n    path('create/', views.CreateUserView.as_view(), name='create'),\n    path('token/', views.CreateTokenView.as_view(), name='token'),\n    path('me/', views.ManageUserView.as_view(), name='me'),\n]",
        "detail": "app.user.urls",
        "documentation": {}
    },
    {
        "label": "CreateUserView",
        "kind": 6,
        "importPath": "app.user.views",
        "description": "app.user.views",
        "peekOfCode": "class CreateUserView(generics.CreateAPIView):\n    \"\"\"Create a new user in the system\"\"\"\n    serializer_class = UserSerializer\nclass CreateTokenView(ObtainAuthToken):\n    \"\"\"Create a new auth token for user\"\"\"\n    serializer_class = AuthTokenSerializer\n    renderer_classes = api_settings.DEFAULT_RENDERER_CLASSES\nclass ManageUserView(generics.RetrieveUpdateAPIView):\n    \"\"\"Manage the authed user\"\"\"\n    serializer_class = UserSerializer",
        "detail": "app.user.views",
        "documentation": {}
    },
    {
        "label": "CreateTokenView",
        "kind": 6,
        "importPath": "app.user.views",
        "description": "app.user.views",
        "peekOfCode": "class CreateTokenView(ObtainAuthToken):\n    \"\"\"Create a new auth token for user\"\"\"\n    serializer_class = AuthTokenSerializer\n    renderer_classes = api_settings.DEFAULT_RENDERER_CLASSES\nclass ManageUserView(generics.RetrieveUpdateAPIView):\n    \"\"\"Manage the authed user\"\"\"\n    serializer_class = UserSerializer\n    authentication_classes = (authentication.TokenAuthentication,)\n    permission_classes = (permissions.IsAuthenticated,)\n    def get_object(self):",
        "detail": "app.user.views",
        "documentation": {}
    },
    {
        "label": "ManageUserView",
        "kind": 6,
        "importPath": "app.user.views",
        "description": "app.user.views",
        "peekOfCode": "class ManageUserView(generics.RetrieveUpdateAPIView):\n    \"\"\"Manage the authed user\"\"\"\n    serializer_class = UserSerializer\n    authentication_classes = (authentication.TokenAuthentication,)\n    permission_classes = (permissions.IsAuthenticated,)\n    def get_object(self):\n        \"\"\"Retrieve and return authed user\"\"\"\n        return self.request.user",
        "detail": "app.user.views",
        "documentation": {}
    }
]